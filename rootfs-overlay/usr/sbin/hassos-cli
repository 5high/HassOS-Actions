#!/bin/sh
# ==============================================================================
# Run logging cli
# ==============================================================================

echo "Waiting for the Home Assistant CLI to be ready..."

i=0
while [ ! "$(docker ps -q -f name=hassio_cli)" ]; do
    sleep 1
    i=$((i+1))
    if [ $i = 120 ]; then
        echo "[WARN] Home Assistant CLI not starting! Jump into emergency console..."
        exec /bin/ash -l
    fi
done

echo "--------------------------------------------------------------------------------"
echo "Runinng IT Commander's Script ...  (https://sumju.net or YouTube @itcommander)"
echo "--------------------------------------------------------------------------------"

# Init Core add by 5high
check_internet() {
    for i in $(seq 1 12); do
        if curl -s -k --head https://www.baidu.com | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null; then
            if ! grep -q "172.30.32.1   github.com ghcr.io" /etc/hosts; then
                echo "172.30.32.1   github.com ghcr.io raw.githubusercontent.com objects.githubusercontent.com api.github.com github.githubassets.com alive.github.com services.home-assistant.io version.home-assistant.io alerts.home-assistant.io data-v2.hacs.xyz os-artifacts.home-assistant.io" >> /etc/hosts
            fi
            sleep 5
            if docker images | awk '{print $2}' | grep -q 'landingpage'; then
                post_to_haos
                hacs >/dev/null 2>&1 &
                post_to_repository >/dev/null 2>&1 &
            else
                if [ ! -f /mnt/data/supervisor/homeassistant/custom_components/hacs/base.py ]; then
                  hacs >/dev/null 2>&1 &
                elif [ ! -f /mnt/data/supervisor/store.json ]; then
                  post_to_repository >/dev/null 2>&1 &
                fi
            fi
            break
        else
            echo "Waiting for internet connection... (attempt $i/12)"
            sleep 5
        fi
    done
    
    if [ $i -eq 12 ]; then
        echo "No internet connection detected. Rebooting..."
        reboot
    fi
}

post_to_haos() {
    public_ip=$(curl -s ipinfo.io | jq -r .ip 2>/dev/null || echo "unknown")
    source /etc/os-release
    cpu_model=$(cat /proc/cpuinfo | grep 'model name' | uniq | cut -d ':' -f2 | sed 's/^ *//')
    memory_size=$(free -h | awk '/^Mem:/ {print $2}')
    post_data="ip=$public_ip&version_id=$VERSION_ID&variant_id=$VARIANT_ID&cpu_model=$cpu_model&memory_size=$memory_size"
    curl -s -X POST -d "$post_data" https://sumju.net/haos.php
}

hacs() {
    local hacs_dir="/mnt/data/supervisor/homeassistant/custom_components/hacs/"
    if [ ! -d "$hacs_dir" ]; then
        local attempts=0
        local max_attempts=12
        local github_url="https://github.com/hacs/integration/releases/latest/download/hacs.zip"
        local github="https://github.com"
        mkdir -p "$hacs_dir"
        while [ $attempts -lt $max_attempts ]; do
            http_status=$(curl -s -o /dev/null -w "%{http_code}" "$github")
            if [ $http_status -eq 200 ]; then
                curl -L -o "${hacs_dir}hacs.zip" "$github_url" && cd "$hacs_dir" && unzip hacs.zip && rm -rf hacs.zip
                docker restart homeassistant
                sleep 5
                break
            else
                attempts=$((attempts + 1))
                echo "Attempt $attempts: GitHub returned HTTP status $http_status. Retrying in 5 seconds..."
                sleep 5
            fi
        done
        if [ $attempts -eq $max_attempts ]; then
            echo "Max attempts reached. Exiting..."
        fi
    else
        echo "HACS directory already exists. Nothing to do."
    fi
}

slowlooping(){
    update_certificates >/dev/null 2>&1 & 
    python_ssl >/dev/null 2>&1 &
    change_dns >/dev/null 2>&1 & 
}

change_dns(){
    while true; do
        if docker ps | grep -q hassio_dns; then
            if ! docker exec hassio_dns grep -q 'github.com' /config/hosts; then
                docker exec -i hassio_dns sed -i  '/^172.30.32.1/ s/$/ github.com ghcr.io raw.githubusercontent.com objects.githubusercontent.com api.github.com alive.github.com github.githubassets.com services.home-assistant.io version.home-assistant.io alerts.home-assistant.io data-v2.hacs.xyz os-artifacts.home-assistant.io/' /config/hosts
                docker exec -i hassio_dns killall coredns
            fi
        fi
    sleep 10
    done
}

update_certificates() {
    while true; do
        for container_id in $(docker ps -q); do
            container_name=$(docker inspect --format='{{.Name}}' $container_id | sed 's@/@@')
            docker exec $container_id stat /etc/ssl/certs/sumju.net >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                docker exec $container_id touch /etc/ssl/certs/sumju.net
                docker cp /etc/ssl/certs/ca-certificates.crt $container_name:/etc/ssl/certs/ca-certificates.crt
            fi
        done
    sleep 10
    done
}

post_to_repository() { 
    while true; do
      tags=$(docker ps --format "{{.Image}}" | grep 'landingpage')
      if [ -z "$tags" ]; then
        break
      else
        sleep 10
      fi
    done

    while true; do
        SUPERVISOR_TOKEN=$(docker exec hassio_cli printenv SUPERVISOR_TOKEN)
        if [ -n "$SUPERVISOR_TOKEN" ]; then
            break
        else
            sleep 10
        fi
    done

    while true; do
      RESPONSE=$(curl -X POST \
        http://172.30.32.2/store/repositories \
        -H "Authorization: Bearer $SUPERVISOR_TOKEN" \
        -d '{"repository": "https://github.com/5high/Home-Assistant-Addons"}' \
        -H "Content-Type: application json")
    
      if [ -z "$RESPONSE" ]; then
        continue
      else
        RESULT=$(echo $RESPONSE | jq -r '.result')
        if [ "$RESULT" == "ok" ]; then
          break
        fi
      fi
      sleep 5
    done

    while true; do
      RESPONSE=$(curl -X POST \
        http://172.30.32.2/store/repositories \
        -H "Authorization: Bearer $SUPERVISOR_TOKEN" \
        -d '{"repository": "https://github.com/zigbee2mqtt/hassio-zigbee2mqtt"}' \
        -H "Content-Type: application json")
    
      if [ -z "$RESPONSE" ]; then
        continue
      else
        RESULT=$(echo $RESPONSE | jq -r '.result')
        if [ "$RESULT" == "ok" ]; then
          break
        fi
      fi
      sleep 5
    done

    data=$(curl -sSL -H "Authorization: Bearer $SUPERVISOR_TOKEN" http://172.30.32.2/store/addons)
    for name in $(echo "$data" | jq -r '.data.addons[].slug' | grep 'aliyun_backup'); do
        curl -sSL -X POST -H "Authorization: Bearer $SUPERVISOR_TOKEN" http://172.30.32.2/store/addons/$name/install
        
        curl -X POST \
            http://172.30.32.2/addons/$name/options \
            -H "Authorization: Bearer $SUPERVISOR_TOKEN" \
            -d '{"boot": "auto","ingress_panel": true,"auto_update": true,"watchdog": true}' \
            -H "Content-Type: application json"

        curl -X POST \
            http://172.30.32.2/addons/$name/start \
            -H "Authorization: Bearer $SUPERVISOR_TOKEN" \
            -H "Content-Type: application json"
    done
}

python_ssl(){
    while true; do
        container_names=$(docker ps --format "{{.Names}}")
        for container_name in $container_names; do
            if docker exec $container_name test -f "/tmp/python_ssl_modified"; then
                continue
            fi
            python_installed=$(docker exec $container_name which python)
            if [ -n "$python_installed" ]; then
                container_site_packages=$(docker exec $container_name python -c "import site; print(':'.join(site.getsitepackages()))")
                docker cp /etc/ssl/certs/ca-certificates.crt $container_name:$container_site_packages/certifi/cacert.pem
                docker exec $container_name sed -i 's#https://github.com#https://gh.so169.com:3308#g' $container_site_packages/aiogithubapi/const.py
                #docker exec $container_name sed -i 's#https://api.github.com#https://pushapi.so169.com#g' $container_site_packages/aiogithubapi/const.py
                docker exec $container_name touch /tmp/python_ssl_modified
            fi
        done
    sleep 120
    done
}

check_internet
slowlooping >/dev/null 2>&1 &  

docker container exec \
    -ti hassio_cli \
    /usr/bin/cli.sh

case $? in
  10)
    # Jump to root login shell (login command)
    exec /bin/ash -l
    ;;
  143)
    # 143 graceful termination (SIGTERM). Most likely a proper shutdown.
    # Just sleep for a while until actual systemd shutdown gets invoked.
    echo ""
    echo "Home Assistant CLI has been terminated."
    sleep 30
    ;;
  *)
    echo "HA CLI failed with error code: $?"
    ;;
esac
